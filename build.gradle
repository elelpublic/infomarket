/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'lars' at '13.06.14 10:39' with Gradle 1.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'ivy-publish'
apply plugin: 'jetty'


// PROJECT ---------------------------------------------------------

group = 'com.infodesire'
version = '0.1.11'
httpPort = 8081 // for standalone test


// DEPENDENCIES & BUILD ---------------------------------------------------------


// In this section you declare where to find the dependencies of your project
repositories {
    
    mavenCentral()
    
	ivy {
		// there is a lot of legacy to adhere to here:
    	url 'http://edge/s/repository/maven'
    	layout 'pattern' , {
            artifact '[organisation].[module]/[type]s/[artifact]-[revision](.[ext])'
        }
    }
    
}

// In this section you declare the dependencies for your production and test code
dependencies {

    // The production code uses the SLF4J logging API at compile time
    compile(
    
    	'com.google.guava:guava:18.0',
    	'com.infodesire:bsmcommons:0.4.5',
    	'com.infodesire:resthelper:0.1.2',
        'org.apache.commons:commons-lang3:3.3.2',
    	'log4j:log4j:1.2.17',
    	'org.apache.httpcomponents:httpclient:4.3.5',
    	'org.mitre.dsmiley.httpproxy:smiley-http-proxy-servlet:1.5'	
     
    )
    
    providedCompile(
    	'servletapi:servlet-api:2.4',
    )

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'

}

compileJava {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}


// WEBAPP ---------------------------------------------------------


// run bower to install webapp dependencies
task bower(type: Exec) {
  outputs.dir "bower_components"
  executable "bower"
  args "install"
}

war.dependsOn bower

def warArchiveName = 'infomarket.war'

war {
  archiveName = warArchiveName
  from( '.' ) {
    include 'bower_components/**'
    exclude 'bower_components/jquery/src/**'
    exclude 'bower_components/jquery/test/**'
    exclude 'bower_components/bootstrap/docs/examples/**'
    exclude 'bower_components/bootstrap/docs/assets/img/example-sites/**'
    exclude 'bower_components/bootstrap/docs/assets/img/examples/**'
  }
}

task projectileWar ( dependsOn: 'war', type: Copy ) {
  description 'Build and copy the warfile to current projectile installation'
  from '' + buildDir + '/libs/' + warArchiveName
  into '../dists/current/thirdparty/tomcat/webapps/'
  doLast {
    println 'finished'
  }
}

task projectile ( dependsOn: 'war', type: Copy ) {
  
  description 'Build and install the exploded warfile to current projectile installation'
  
  def zipFile = file( '' + buildDir + '/libs/' + warArchiveName )
  def outputDir = file( '../dists/current/thirdparty/tomcat/webapps/projectile/apps/infomarket' )

  from zipTree(zipFile)
  into outputDir

}


// PUBLISH --------------------------------------------------------


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'src'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives war
}

publishing {
publications {
  ivyJava( IvyPublication ) {
    from components.java
    artifact(sourcesJar) {
              type "source"
              conf "runtime"
          }
  }
  ivyWeb( IvyPublication ) {
    from components.web
  }
}
repositories {
  ivy {
    // there is a lot of legacy to adhere to here:
      url 'file://s/repository/maven'
      layout 'pattern' , {
            artifact '[organisation].[module]/[type]s/[artifact]-[revision](.[ext])'
        }
    }
}
}

// TWEAKS  --------------------------------------------------------

// change some gradle defaults

//customizing the classes output directory:
eclipse {
  classpath {
    defaultOutputDir = file('eclipse-build')
  }
}



